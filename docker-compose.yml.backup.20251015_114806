services:
  nginx:
    image: nginx:alpine
    container_name: digestgenie-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
      - n8n
    networks:
      - digestgenie-network
    restart: unless-stopped

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: digestgenie-web
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    networks:
      - digestgenie-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: digestgenie-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - digestgenie-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: digestgenie-redis
    networks:
      - digestgenie-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  n8n:
    image: n8nio/n8n:latest
    container_name: digestgenie-n8n
    environment:
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - WEBHOOK_URL=http://web:3000/api/webhooks/email
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - digestgenie-network
    restart: unless-stopped

  mailhog:
    image: mailhog/mailhog:latest
    container_name: digestgenie-mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    restart: unless-stopped
    networks:
      - digestgenie-network

# Postfix Mail Server - Receives incoming emails
  postfix:
    image: boky/postfix:latest
    container_name: digestgenie-postfix
    hostname: mail.digest-genie.com
    environment:
      # Allow receiving from ANY sender (newsletters from anywhere)
      - ALLOW_EMPTY_SENDER_DOMAINS=true
      # Specify which domain we accept mail FOR
      - POSTFIX_myhostname=mail.digest-genie.com
      - POSTFIX_mydestination=digest-genie.com,mail.digest-genie.com,localhost
      - POSTFIX_mynetworks=127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
      # Mailbox settings
      - POSTFIX_virtual_mailbox_domains=digest-genie.com
      - POSTFIX_virtual_mailbox_base=/var/mail
      - POSTFIX_virtual_mailbox_maps=hash:/etc/postfix/vmailbox
      - POSTFIX_virtual_alias_maps=hash:/etc/postfix/virtual
    ports:
      - "25:25"
    volumes:
      - ./mail/postfix:/var/spool/postfix
      - ./mail/mailboxes:/var/mail
      - ./mail/config:/etc/postfix/custom:ro
    restart: unless-stopped
    networks:
      - digestgenie-network

  # Email Forwarder - Forwards received emails to webhook
  mail-forwarder:
    build:
      context: ./mail/forwarder
      dockerfile: Dockerfile
    container_name: digestgenie-mail-forwarder
    environment:
      - WEBHOOK_URL=http://digestgenie-web:3000/api/webhooks/email
      - MAILBOX_PATH=/var/mail
      - CHECK_INTERVAL=10
    volumes:
      - ./mail/mailboxes:/var/mail:ro
    depends_on:
      - postfix
      - web
    restart: unless-stopped
    networks:
      - digestgenie-network



volumes:
  postgres_data:
  n8n_data:

networks:
  digestgenie-network:
    driver: bridge

