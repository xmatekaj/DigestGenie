{
  "workflows": {
    "email_ingestion": {
      "name": "Email Ingestion Pipeline",
      "active": true,
      "nodes": [
        {
          "name": "Email Webhook",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [240, 300],
          "parameters": {
            "path": "email-webhook",
            "httpMethod": "POST",
            "responseMode": "responseNode"
          }
        },
        {
          "name": "Parse Email Data",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [460, 300],
          "parameters": {
            "functionCode": "// Extract and validate email data\nconst emailData = $input.first().json;\n\nreturn [{\n  json: {\n    messageId: emailData.messageId || emailData['Message-ID'],\n    from: emailData.from,\n    to: emailData.to,\n    subject: emailData.subject,\n    date: emailData.date,\n    rawContent: emailData.raw || emailData.body,\n    recipientUserId: emailData.to.split('@')[0] // extract user ID from email\n  }\n}];"
          }
        },
        {
          "name": "Store Raw Email",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [680, 300],
          "parameters": {
            "operation": "insert",
            "schema": "public",
            "table": "raw_emails",
            "columns": "message_id,sender,subject,received_date,raw_content,user_id",
            "additionalFields": {
              "mode": "independently"
            }
          }
        },
        {
          "name": "Queue Processing Job",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [900, 300],
          "parameters": {
            "operation": "insert",
            "schema": "public",
            "table": "processing_jobs",
            "columns": "job_type,payload,status",
            "additionalFields": {
              "mode": "independently"
            }
          }
        },
        {
          "name": "Success Response",
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1,
          "position": [1120, 300],
          "parameters": {
            "responseBody": "{\"status\": \"received\", \"message\": \"Email queued for processing\"}",
            "options": {
              "responseCode": 200
            }
          }
        }
      ],
      "connections": {
        "Email Webhook": {
          "main": [["Parse Email Data"]]
        },
        "Parse Email Data": {
          "main": [["Store Raw Email"]]
        },
        "Store Raw Email": {
          "main": [["Queue Processing Job"]]
        },
        "Queue Processing Job": {
          "main": [["Success Response"]]
        }
      }
    },

    "ai_content_processor": {
      "name": "AI Content Processing Pipeline",
      "active": true,
      "nodes": [
        {
          "name": "Processing Job Trigger",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [240, 300],
          "parameters": {
            "operation": "select",
            "schema": "public",
            "table": "processing_jobs",
            "where": {
              "conditions": [
                {
                  "leftValue": "status",
                  "operation": "equal",
                  "rightValue": "pending"
                },
                {
                  "leftValue": "job_type",
                  "operation": "equal",
                  "rightValue": "email_processing"
                }
              ]
            },
            "sort": {
              "field": "scheduled_at",
              "direction": "ASC"
            },
            "limit": 1
          }
        },
        {
          "name": "Update Job Status",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [460, 300],
          "parameters": {
            "operation": "update",
            "schema": "public",
            "table": "processing_jobs",
            "updateKey": "id",
            "columns": "status,started_at,attempts",
            "additionalFields": {
              "mode": "independently"
            }
          }
        },
        {
          "name": "Get Raw Email",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [680, 300],
          "parameters": {
            "operation": "select",
            "schema": "public",
            "table": "raw_emails",
            "where": {
              "conditions": [
                {
                  "leftValue": "id",
                  "operation": "equal",
                  "rightValue": "={{$json.payload.rawEmailId}}"
                }
              ]
            }
          }
        },
        {
          "name": "Extract Content",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [900, 300],
          "parameters": {
            "functionCode": "// Content extraction and cleaning\nconst { JSDOM } = require('jsdom');\nconst rawContent = $input.first().json.raw_content;\n\n// Parse HTML and extract text\nconst dom = new JSDOM(rawContent);\nconst document = dom.window.document;\n\n// Remove scripts and styles\ndocument.querySelectorAll('script, style').forEach(el => el.remove());\n\n// Extract clean text\nconst textContent = document.body ? document.body.textContent.trim() : '';\nconst htmlContent = document.body ? document.body.innerHTML : rawContent;\n\n// Extract newsletter metadata\nconst sender = $input.first().json.sender;\nconst subject = $input.first().json.subject;\nconst senderDomain = sender.split('@')[1];\n\nreturn [{\n  json: {\n    ...($input.first().json),\n    extractedText: textContent,\n    extractedHtml: htmlContent,\n    senderDomain: senderDomain,\n    wordCount: textContent.split(' ').length\n  }\n}];"
          }
        },
        {
          "name": "AI Analysis",
          "type": "n8n-nodes-base.openAi",
          "typeVersion": 1,
          "position": [1120, 300],
          "parameters": {
            "resource": "chatCompletion",
            "model": "gpt-4",
            "messages": {
              "values": [
                {
                  "role": "system",
                  "content": "You are an expert newsletter content analyzer. Analyze the provided newsletter content and return a JSON response with summary, title, interest score, tags, and thumbnail recommendation."
                },
                {
                  "role": "user", 
                  "content": "=Analyze this newsletter content:\n\nSubject: {{$json.subject}}\nSender: {{$json.sender}}\nContent: {{$json.extractedText.substring(0, 2000)}}\n\nProvide analysis in this JSON format:\n{\n  \"summary\": \"Brief 2-3 sentence summary\",\n  \"title\": \"Engaging title\",\n  \"interestScore\": 85,\n  \"tags\": [\"tag1\", \"tag2\"],\n  \"shouldGenerateThumbnail\": true,\n  \"category\": \"tech\"\n}"
                }
              ]
            },
            "options": {
              "temperature": 0.7,
              "maxTokens": 500
            }
          }
        },
        {
          "name": "Parse AI Response",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [1340, 300],
          "parameters": {
            "functionCode": "// Parse OpenAI response\nconst aiResponse = $input.first().json.choices[0].message.content;\nconst analysis = JSON.parse(aiResponse);\n\nreturn [{\n  json: {\n    ...$input.first().json,\n    aiAnalysis: analysis\n  }\n}];"
          }
        },
        {
          "name": "Find/Create Newsletter",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [1560, 300],
          "parameters": {
            "operation": "select",
            "schema": "public",
            "table": "newsletters",
            "where": {
              "conditions": [
                {
                  "leftValue": "sender_email",
                  "operation": "equal",
                  "rightValue": "={{$json.sender}}"
                }
              ]
            }
          }
        },
        {
          "name": "Create Newsletter if Not Exists",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [1780, 300],
          "parameters": {
            "conditions": {
              "options": {
                "leftValue": "={{$json.length}}",
                "operation": "equal",
                "rightValue": 0
              }
            }
          }
        },
        {
          "name": "Insert New Newsletter",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [1780, 480],
          "parameters": {
            "operation": "insert",
            "schema": "public", 
            "table": "newsletters",
            "columns": "name,sender_email,sender_domain,is_predefined",
            "returnFields": "id"
          }
        },
        {
          "name": "Create Article Record",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [2000, 300],
          "parameters": {
            "operation": "insert",
            "schema": "public",
            "table": "articles",
            "columns": "newsletter_id,user_id,subject,content,plain_content,sender_email,received_at,ai_summary,ai_generated_title,ai_interest_score,ai_tags,processing_status,processed_at"
          }
        },
        {
          "name": "Generate Thumbnail Condition",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [2220, 300],
          "parameters": {
            "conditions": {
              "options": {
                "leftValue": "={{$json.aiAnalysis.shouldGenerateThumbnail}}",
                "operation": "equal",
                "rightValue": true
              }
            }
          }
        },
        {
          "name": "Generate Thumbnail",
          "type": "n8n-nodes-base.openAi",
          "typeVersion": 1,
          "position": [2220, 480],
          "parameters": {
            "resource": "image",
            "model": "dall-e-3",
            "prompt": "=Create a clean, professional newsletter thumbnail for: {{$json.aiAnalysis.summary}}",
            "size": "1024x1024",
            "quality": "standard"
          }
        },
        {
          "name": "Update Article with Thumbnail",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [2440, 480],
          "parameters": {
            "operation": "update",
            "schema": "public",
            "table": "articles",
            "updateKey": "id",
            "columns": "ai_thumbnail_url"
          }
        },
        {
          "name": "Complete Job",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [2440, 300],
          "parameters": {
            "operation": "update",
            "schema": "public",
            "table": "processing_jobs",
            "updateKey": "id",
            "columns": "status,completed_at"
          }
        }
      ],
      "connections": {
        "Processing Job Trigger": {
          "main": [["Update Job Status"]]
        },
        "Update Job Status": {
          "main": [["Get Raw Email"]]
        },
        "Get Raw Email": {
          "main": [["Extract Content"]]
        },
        "Extract Content": {
          "main": [["AI Analysis"]]
        },
        "AI Analysis": {
          "main": [["Parse AI Response"]]
        },
        "Parse AI Response": {
          "main": [["Find/Create Newsletter"]]
        },
        "Find/Create Newsletter": {
          "main": [["Create Newsletter if Not Exists"]]
        },
        "Create Newsletter if Not Exists": {
          "main": [["Create Article Record"], ["Insert New Newsletter"]]
        },
        "Insert New Newsletter": {
          "main": [["Create Article Record"]]
        },
        "Create Article Record": {
          "main": [["Generate Thumbnail Condition"]]
        },
        "Generate Thumbnail Condition": {
          "main": [["Complete Job"], ["Generate Thumbnail"]]
        },
        "Generate Thumbnail": {
          "main": [["Update Article with Thumbnail"]]
        },
        "Update Article with Thumbnail": {
          "main": [["Complete Job"]]
        }
      }
    },

    "user_digest_sender": {
      "name": "User Digest Email Sender",
      "active": true,
      "nodes": [
        {
          "name": "Schedule Trigger",
          "type": "n8n-nodes-base.cron",
          "typeVersion": 1,
          "position": [240, 300],
          "parameters": {
            "rule": {
              "hour": 9,
              "minute": 0
            }
          }
        },
        {
          "name": "Get Users for Digest",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [460, 300],
          "parameters": {
            "operation": "select",
            "schema": "public",
            "table": "users",
            "columns": "id,email,name",
            "where": {
              "conditions": [
                {
                  "leftValue": "email_notifications",
                  "operation": "equal",
                  "rightValue": true
                }
              ]
            }
          }
        },
        {
          "name": "Process Each User",
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 1,
          "position": [680, 300],
          "parameters": {
            "batchSize": 1
          }
        },
        {
          "name": "Get User Articles",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [900, 300],
          "parameters": {
            "operation": "select",
            "schema": "public",
            "table": "articles",
            "where": {
              "conditions": [
                {
                  "leftValue": "user_id",
                  "operation": "equal",
                  "rightValue": "={{$json.id}}"
                },
                {
                  "leftValue": "received_at",
                  "operation": "greaterThan",
                  "rightValue": "={{new Date(Date.now() - 24*60*60*1000).toISOString()}}"
                },
                {
                  "leftValue": "ai_interest_score",
                  "operation": "greaterThan",
                  "rightValue": 70
                }
              ]
            },
            "sort": {
              "field": "ai_interest_score",
              "direction": "DESC"
            },
            "limit": 10
          }
        },
        {
          "name": "Generate Digest Email",
          "type": "n8n-nodes-base.function",
          "typeVersion": 1,
          "position": [1120, 300],
          "parameters": {
            "functionCode": "// Generate HTML email digest\nconst user = $input.first().json;\nconst articles = $input.all().slice(1); // Skip user data\n\nif (articles.length === 0) {\n  return [{ json: { skip: true } }];\n}\n\nconst emailHtml = `\n<html>\n<head>\n  <style>\n    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n    .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n    .header { background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; }\n    .article { border: 1px solid #eee; border-radius: 8px; margin-bottom: 15px; overflow: hidden; }\n    .article-header { background: #f8f9fa; padding: 15px; }\n    .article-content { padding: 15px; }\n    .interest-score { background: #007bff; color: white; padding: 4px 8px; border-radius: 4px; font-size: 12px; }\n    .tags { margin-top: 10px; }\n    .tag { background: #e9ecef; padding: 2px 6px; border-radius: 4px; font-size: 11px; margin-right: 5px; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"header\">\n      <h2>Your Daily Newsletter Digest</h2>\n      <p>Here are the most interesting articles from your subscriptions:</p>\n    </div>\n    \n    ${articles.map(article => `\n      <div class=\"article\">\n        <div class=\"article-header\">\n          <h3>${article.ai_generated_title || article.subject}</h3>\n          <span class=\"interest-score\">${article.ai_interest_score}% match</span>\n        </div>\n        <div class=\"article-content\">\n          <p>${article.ai_summary}</p>\n          <div class=\"tags\">\n            ${article.ai_tags ? article.ai_tags.map(tag => `<span class=\"tag\">${tag}</span>`).join('') : ''}\n          </div>\n        </div>\n      </div>\n    `).join('')}\n    \n    <div style=\"text-align: center; margin-top: 30px; padding: 20px; background: #f8f9fa; border-radius: 8px;\">\n      <p><a href=\"https://yourdomain.com/dashboard\" style=\"background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px;\">View Full Dashboard</a></p>\n    </div>\n  </div>\n</body>\n</html>\n`;\n\nreturn [{\n  json: {\n    to: user.email,\n    subject: `Your Newsletter Digest - ${articles.length} interesting articles`,\n    html: emailHtml,\n    user: user\n  }\n}];"
          }
        },
        {
          "name": "Skip Empty Digest",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [1340, 300],
          "parameters": {
            "conditions": {
              "options": {
                "leftValue": "={{$json.skip}}",
                "operation": "notEqual",
                "rightValue": true
              }
            }
          }
        },
        {
          "name": "Send Email",
          "type": "n8n-nodes-base.emailSend",
          "typeVersion": 1,
          "position": [1560, 300],
          "parameters": {
            "fromEmail": "digest@yourdomain.com",
            "toEmail": "={{$json.to}}",
            "subject": "={{$json.subject}}",
            "emailType": "html",
            "message": "={{$json.html}}"
          }
        }
      ],
      "connections": {
        "Schedule Trigger": {
          "main": [["Get Users for Digest"]]
        },
        "Get Users for Digest": {
          "main": [["Process Each User"]]
        },
        "Process Each User": {
          "main": [["Get User Articles"]]
        },
        "Get User Articles": {
          "main": [["Generate Digest Email"]]
        },
        "Generate Digest Email": {
          "main": [["Skip Empty Digest"]]
        },
        "Skip Empty Digest": {
          "main": [["Send Email"]]
        }
      }
    }
  },

  "triggers": {
    "job_processor": {
      "name": "Job Queue Processor",
      "schedule": "*/2 * * * *",
      "description": "Runs every 2 minutes to process pending jobs"
    },
    "cleanup_old_data": {
      "name": "Data Cleanup",
      "schedule": "0 2 * * *", 
      "description": "Daily cleanup of old processed emails and jobs"
    }
  }
}