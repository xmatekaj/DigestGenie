{
  "name": "Newsletter Email Processing with Claude AI",
  "nodes": [
    {
      "parameters": {
        "path": "newsletter-email",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Email Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "email-processing"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.to }}",
              "operation": "contains",
              "value2": "@newsletters."
            }
          ]
        }
      },
      "id": "filter-newsletters",
      "name": "Filter Newsletter Emails",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Parse email data and identify newsletter\nconst emailData = $input.first().json;\n\n// Extract key information\nconst fromEmail = emailData.from;\nconst subject = emailData.subject;\nconst htmlContent = emailData.html || '';\nconst textContent = emailData.text || '';\nconst receivedAt = emailData.received_at || new Date().toISOString();\n\n// Extract user ID from recipient email\nconst recipientEmail = emailData.to;\nconst userId = recipientEmail.split('@')[0].replace('user', '');\n\n// Extract sender domain\nconst senderDomain = fromEmail.split('@')[1];\n\n// Identify known newsletters\nconst knownNewsletters = {\n  'morningbrew.com': { name: 'Morning Brew', frequency: 'daily' },\n  'techcrunch.com': { name: 'TechCrunch', frequency: 'daily' },\n  'thehustle.co': { name: 'The Hustle', frequency: 'daily' },\n  'ben-evans.com': { name: 'Benedict Evans', frequency: 'weekly' },\n  'stratechery.com': { name: 'Stratechery', frequency: 'weekly' }\n};\n\nconst newsletterInfo = knownNewsletters[senderDomain] || {\n  name: 'Unknown Newsletter',\n  frequency: 'unknown'\n};\n\n// Extract articles from content (simple implementation)\nconst articles = [];\n\n// For HTML content, try to extract article sections\nif (htmlContent) {\n  // This is a basic extraction - you might want to enhance this\n  const articlePatterns = [\n    /<h[1-3][^>]*>(.*?)<\\/h[1-3]>/gi,\n    /<div[^>]*class[^>]*article[^>]*>(.*?)<\\/div>/gi,\n    /<p[^>]*>(.*?)<\\/p>/gi\n  ];\n  \n  let articleContent = htmlContent;\n  let matches;\n  \n  // Extract titles/headers\n  const titleRegex = /<h[1-3][^>]*>(.*?)<\\/h[1-3]>/gi;\n  let articleIndex = 0;\n  \n  while ((matches = titleRegex.exec(htmlContent)) !== null && articleIndex < 5) {\n    const title = matches[1].replace(/<[^>]*>/g, '').trim();\n    if (title.length > 10) { // Only consider meaningful titles\n      articles.push({\n        title: title,\n        content: '', // Will be filled by article extraction\n        url: '', // Will be extracted if available\n        excerpt: ''\n      });\n      articleIndex++;\n    }\n  }\n}\n\n// If no articles found in HTML, use subject as single article\nif (articles.length === 0) {\n  articles.push({\n    title: subject,\n    content: textContent || htmlContent.replace(/<[^>]*>/g, ''),\n    url: '',\n    excerpt: textContent.substring(0, 200)\n  });\n}\n\nreturn {\n  userId: userId,\n  fromEmail: fromEmail,\n  subject: subject,\n  senderDomain: senderDomain,\n  newsletterName: newsletterInfo.name,\n  frequency: newsletterInfo.frequency,\n  receivedAt: receivedAt,\n  articles: articles,\n  rawHtml: htmlContent,\n  rawText: textContent\n};"
      },
      "id": "parse-email",
      "name": "Parse Email Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "url": "https://api.anthropic.com/v1/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "x-api-key",
          "value": "={{ $vars.ANTHROPIC_API_KEY }}"
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "anthropic-version",
              "value": "2023-06-01"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "claude-3-haiku-20240307"
            },
            {
              "name": "max_tokens",
              "value": 200
            },
            {
              "name": "temperature",
              "value": 0.3
            },
            {
              "name": "messages",
              "value": "=[{\"role\": \"user\", \"content\": \"Please summarize the following newsletter content in 2-3 sentences (maximum 100 words). Focus on the key points and main takeaways:\\n\\n\" + $json.articles[0].content}]"
            }
          ]
        },
        "options": {}
      },
      "id": "claude-summarize",
      "name": "Claude AI - Generate Summary",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 200]
    },
    {
      "parameters": {
        "url": "https://api.anthropic.com/v1/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "x-api-key",
          "value": "={{ $vars.ANTHROPIC_API_KEY }}"
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "anthropic-version",
              "value": "2023-06-01"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "claude-3-haiku-20240307"
            },
            {
              "name": "max_tokens",
              "value": 20
            },
            {
              "name": "temperature",
              "value": 0.1
            },
            {
              "name": "messages",
              "value": "=[{\"role\": \"user\", \"content\": \"Categorize the following content into ONE of these categories: Technology, Business, Finance, Science, Health, Politics, Entertainment, Sports, Lifestyle, Education, Startups, AI/ML, Cryptocurrency, Marketing, Design, Other\\n\\nContent: \" + $json.articles[0].content.substring(0, 500) + \"\\n\\nRespond with ONLY the category name, nothing else.\"}]"
            }
          ]
        },
        "options": {}
      },
      "id": "claude-categorize",
      "name": "Claude AI - Categorize Content",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 400]
    },
    {
      "parameters": {
        "url": "https://api.anthropic.com/v1/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "x-api-key",
          "value": "={{ $vars.ANTHROPIC_API_KEY }}"
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "anthropic-version",
              "value": "2023-06-01"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "claude-3-haiku-20240307"
            },
            {
              "name": "max_tokens",
              "value": 10
            },
            {
              "name": "temperature",
              "value": 0.1
            },
            {
              "name": "messages",
              "value": "=[{\"role\": \"user\", \"content\": \"Rate how interesting and engaging this content would be for a general audience on a scale of 0.0 to 1.0, where:\\n- 0.0 = Not interesting at all, boring, irrelevant\\n- 0.5 = Moderately interesting, average engagement\\n- 1.0 = Extremely interesting, highly engaging, viral potential\\n\\nConsider factors like novelty, practical value, relevance to trends, emotional impact, and clarity.\\n\\nContent: \" + $json.articles[0].content.substring(0, 400) + \"\\n\\nRespond with ONLY a decimal number between 0.0 and 1.0, nothing else.\"}]"
            }
          ]
        },
        "options": {}
      },
      "id": "claude-interest-score",
      "name": "Claude AI - Interest Scoring",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 600]
    },
    {
      "parameters": {
        "jsCode": "// Combine all AI results with original data\nconst originalData = $input.first().json;\nconst summaryResponse = $input.all()[1]?.json;\nconst categoryResponse = $input.all()[2]?.json;\nconst interestResponse = $input.all()[3]?.json;\n\n// Extract AI responses\nconst aiSummary = summaryResponse?.content?.[0]?.text || null;\nconst aiCategory = categoryResponse?.content?.[0]?.text?.trim() || 'Other';\nconst aiInterestScore = parseFloat(interestResponse?.content?.[0]?.text?.trim() || '0.5');\n\n// Prepare articles with AI enhancements\nconst enhancedArticles = originalData.articles.map(article => ({\n  ...article,\n  aiSummary: aiSummary,\n  aiCategory: aiCategory,\n  aiInterestScore: Math.max(0, Math.min(1, aiInterestScore)) // Ensure score is between 0 and 1\n}));\n\nreturn {\n  ...originalData,\n  articles: enhancedArticles,\n  processingStatus: 'completed',\n  aiProcessed: true,\n  processedAt: new Date().toISOString()\n};"
      },
      "id": "combine-ai-results",
      "name": "Combine AI Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "url": "http://web:3000/api/newsletters/process-email",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "Authorization",
          "value": "Bearer {{ $vars.INTERNAL_API_KEY }}"
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "userId",
              "value": "={{ $json.userId }}"
            },
            {
              "name": "newsletterName",
              "value": "={{ $json.newsletterName }}"
            },
            {
              "name": "senderEmail",
              "value": "={{ $json.fromEmail }}"
            },
            {
              "name": "senderDomain",
              "value": "={{ $json.senderDomain }}"
            },
            {
              "name": "subject",
              "value": "={{ $json.subject }}"
            },
            {
              "name": "frequency",
              "value": "={{ $json.frequency }}"
            },
            {
              "name": "receivedAt",
              "value": "={{ $json.receivedAt }}"
            },
            {
              "name": "articles",
              "value": "={{ $json.articles }}"
            },
            {
              "name": "processingStatus",
              "value": "={{ $json.processingStatus }}"
            }
          ]
        },
        "options": {}
      },
      "id": "send-to-api",
      "name": "Send to Processing API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "jsCode": "// Log successful processing\nconst response = $input.first().json;\n\nconsole.log('✅ Email processing completed successfully:', {\n  userId: response.userId,\n  newsletter: response.newsletterName,\n  articlesProcessed: response.articles?.length || 0,\n  aiEnhanced: response.aiProcessed,\n  timestamp: new Date().toISOString()\n});\n\nreturn {\n  status: 'completed',\n  message: 'Email processed and articles saved with AI enhancement',\n  articleCount: response.articles?.length || 0,\n  aiProcessed: response.aiProcessed\n};"
      },
      "id": "log-success",
      "name": "Log Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 300]
    }
  ],
  "connections": {
    "Email Webhook": {
      "main": [
        [
          {
            "node": "Filter Newsletter Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Newsletter Emails": {
      "main": [
        [
          {
            "node": "Parse Email Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Email Data": {
      "main": [
        [
          {
            "node": "Claude AI - Generate Summary",
            "type": "main",
            "index": 0
          },
          {
            "node": "Claude AI - Categorize Content",
            "type": "main",
            "index": 0
          },
          {
            "node": "Claude AI - Interest Scoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Claude AI - Generate Summary": {
      "main": [
        [
          {
            "node": "Combine AI Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Claude AI - Categorize Content": {
      "main": [
        [
          {
            "node": "Combine AI Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Claude AI - Interest Scoring": {
      "main": [
        [
          {
            "node": "Combine AI Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine AI Results": {
      "main": [
        [
          {
            "node": "Send to Processing API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to Processing API": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "tags": ["newsletter", "email-processing", "claude-ai"],
  "triggerCount": 1,
  "updatedAt": "2024-01-20T12:00:00.000Z",
  "versionId": "2"
}