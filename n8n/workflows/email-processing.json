{
  "meta": {
    "instanceId": "newsletter-aggregator-workflow"
  },
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/webhook/email",
        "options": {}
      },
      "id": "webhook-email-received",
      "name": "Email Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "email-processing"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.to }}",
              "rightValue": "@newsletters.yourdomain.com",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "filter-newsletter-emails",
      "name": "Filter Newsletter Emails",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract user ID from email address\nconst emailTo = $input.all()[0].json.to;\nconst userMatch = emailTo.match(/user([a-f0-9]+)@newsletters\\.yourdomain\\.com/);\n\nif (!userMatch) {\n  return { error: 'Invalid system email format' };\n}\n\nconst userId = userMatch[1];\n\n// Parse email content\nconst emailData = $input.all()[0].json;\n\nreturn {\n  userId: userId,\n  from: emailData.from,\n  subject: emailData.subject,\n  htmlContent: emailData.html || '',\n  textContent: emailData.text || '',\n  receivedAt: new Date().toISOString(),\n  messageId: emailData.messageId || `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n};"
      },
      "id": "parse-email-data",
      "name": "Parse Email Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://web:3000/api/newsletters/process-email",
        "authentication": "none",
        "requestFormat": "json",
        "jsonParameters": "true",
        "parameterMode": "json",
        "bodyParameters": "={{ $json }}",
        "options": {
          "headers": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.INTERNAL_API_KEY }}"
            }
          ]
        }
      },
      "id": "send-to-api",
      "name": "Send to Processing API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.status }}",
              "rightValue": "success",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-processing-success",
      "name": "Check Processing Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "jsCode": "// Log successful processing\nconsole.log('Email processed successfully:', {\n  userId: $input.all()[0].json.userId,\n  subject: $input.all()[0].json.subject,\n  from: $input.all()[0].json.from,\n  processedAt: new Date().toISOString()\n});\n\nreturn { \n  status: 'completed',\n  message: 'Email processed and articles extracted'\n};"
      },
      "id": "log-success",
      "name": "Log Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 120]
    },
    {
      "parameters": {
        "jsCode": "// Log processing error\nconsole.error('Email processing failed:', {\n  userId: $input.all()[0].json.userId,\n  subject: $input.all()[0].json.subject,\n  error: $input.all()[0].json.error,\n  timestamp: new Date().toISOString()\n});\n\n// You could also send to error tracking service here\n\nreturn { \n  status: 'failed',\n  message: 'Email processing failed'\n};"
      },
      "id": "log-error",
      "name": "Log Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 280]
    },
    {
      "parameters": {
        "jsCode": "// Extract newsletter information from sender\nconst fromEmail = $input.all()[0].json.from;\nconst senderDomain = fromEmail.split('@')[1];\n\n// Try to identify newsletter based on sender\n// This is a simple implementation - you could enhance with AI\nlet newsletterName = 'Unknown Newsletter';\nlet frequency = 'unknown';\n\nconst knownNewsletters = {\n  'morning-brew.com': { name: 'Morning Brew', frequency: 'daily' },\n  'techcrunch.com': { name: 'TechCrunch', frequency: 'daily' },\n  'thehustle.co': { name: 'The Hustle', frequency: 'daily' },\n  'ben-evans.com': { name: 'Benedict Evans', frequency: 'weekly' },\n  'stratechery.com': { name: 'Stratechery', frequency: 'weekly' }\n};\n\nif (knownNewsletters[senderDomain]) {\n  newsletterName = knownNewsletters[senderDomain].name;\n  frequency = knownNewsletters[senderDomain].frequency;\n}\n\nreturn {\n  ...($input.all()[0].json),\n  newsletterName,\n  senderDomain,\n  frequency\n};"
      },
      "id": "identify-newsletter",
      "name": "Identify Newsletter",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Simple article extraction from HTML content\nconst htmlContent = $input.all()[0].json.htmlContent;\nconst textContent = $input.all()[0].json.textContent;\n\n// This is a basic implementation - you'd want to use more sophisticated parsing\n// For now, we'll treat the entire email as one article\nconst articles = [];\n\nif (htmlContent || textContent) {\n  // Extract title from subject\n  const title = $input.all()[0].json.subject;\n  \n  // Try to extract links from HTML\n  const linkRegex = /<a[^>]+href=\"([^\"]+)\"[^>]*>([^<]+)<\\/a>/g;\n  const links = [];\n  let match;\n  \n  while ((match = linkRegex.exec(htmlContent)) !== null) {\n    links.push({\n      url: match[1],\n      title: match[2].trim()\n    });\n  }\n  \n  // If we have links, create articles from them\n  if (links.length > 0) {\n    links.forEach((link, index) => {\n      articles.push({\n        title: link.title,\n        url: link.url,\n        excerpt: '', // Would extract from surrounding text\n        content: '', // Would fetch from URL\n        order: index + 1\n      });\n    });\n  } else {\n    // Single article from entire email\n    articles.push({\n      title: title,\n      url: '',\n      excerpt: textContent.substring(0, 200) + '...',\n      content: textContent,\n      order: 1\n    });\n  }\n}\n\nreturn {\n  ...($input.all()[0].json),\n  articles: articles,\n  articleCount: articles.length\n};"
      },
      "id": "extract-articles",
      "name": "Extract Articles",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    }
  ],
  "connections": {
    "Email Webhook": {
      "main": [
        [
          {
            "node": "Filter Newsletter Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Newsletter Emails": {
      "main": [
        [
          {
            "node": "Parse Email Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Identify Newsletter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Email Data": {
      "main": [
        [
          {
            "node": "Send to Processing API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Identify Newsletter": {
      "main": [
        [
          {
            "node": "Extract Articles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Articles": {
      "main": [
        [
          {
            "node": "Send to Processing API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to Processing API": {
      "main": [
        [
          {
            "node": "Check Processing Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Processing Success": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "tags": ["newsletter", "email-processing"],
  "triggerCount": 1,
  "updatedAt": "2024-01-20T12:00:00.000Z",
  "versionId": "1"
}