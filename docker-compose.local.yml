version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: newsletter_postgres
    environment:
      POSTGRES_DB: newsletter_aggregator
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.db:/docker-entrypoint-initdb.d/schema.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and job queues
  redis:
    image: redis:7-alpine
    container_name: newsletter_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Main Next.js Application
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: newsletter_web
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD}@postgres:5432/newsletter_aggregator
      REDIS_URL: redis://redis:6379
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      EMAIL_DOMAIN: ${EMAIL_DOMAIN}
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - /app/node_modules
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: newsletter_n8n
    ports:
      - "5678:5678"
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_USER: postgres
      DB_POSTGRESDB_PASSWORD: ${DB_PASSWORD}
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      WEBHOOK_URL: ${WEBHOOK_URL:-http://localhost:5678}
      GENERIC_TIMEZONE: UTC
      N8N_SECURE_COOKIE: false
      N8N_HOST: 0.0.0.0
      N8N_PORT: 5678
      N8N_PROTOCOL: http
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/tmp/workflows:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Postal Mail Server (Optional - for advanced email processing)
  postal:
    image: postal/postal:latest
    container_name: newsletter_postal
    ports:
      - "25:25"    # SMTP
      - "8080:5000" # Web interface
    environment:
      MYSQL_HOST: postal-mysql
      MYSQL_DATABASE: postal
      MYSQL_USERNAME: postal
      MYSQL_PASSWORD: ${POSTAL_DB_PASSWORD}
      POSTAL_CONFIG_ROOT: /config
    depends_on:
      - postal-mysql
    volumes:
      - postal_data:/opt/postal
      - postal_config:/config
    restart: unless-stopped
    profiles: ["postal"] # Optional service, enable with --profile postal

  # MySQL for Postal (only if using Postal)
  postal-mysql:
    image: mariadb:10.6
    container_name: newsletter_postal_mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${POSTAL_DB_PASSWORD}
      MYSQL_DATABASE: postal
      MYSQL_USER: postal
      MYSQL_PASSWORD: ${POSTAL_DB_PASSWORD}
    volumes:
      - postal_mysql_data:/var/lib/mysql
    restart: unless-stopped
    profiles: ["postal"]

  # Background Job Processor
  worker:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: newsletter_worker
    environment:
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD}@postgres:5432/newsletter_aggregator
      REDIS_URL: redis://redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      NODE_ENV: production
      WORKER_MODE: true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
    restart: unless-stopped
    command: ["node", "scripts/worker.js"]
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: newsletter_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
      - n8n
    restart: unless-stopped
    profiles: ["production"]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  n8n_data:
    driver: local
  postal_data:
    driver: local
  postal_mysql_data:
    driver: local
  postal_config:
    driver: local

networks:
  default:
    name: newsletter_network
    driver: bridge