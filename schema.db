-- Newsletter Aggregator Database Schema

-- Users and Authentication
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email VARCHAR(255) UNIQUE NOT NULL,
  name VARCHAR(100),
  google_id VARCHAR(100) UNIQUE,
  password_hash VARCHAR(255), -- for email/password auth
  system_email VARCHAR(255) UNIQUE, -- user123@newsletters.yourdomain.com
  is_verified BOOLEAN DEFAULT false,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 2FA Implementation
CREATE TABLE user_2fa (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  secret VARCHAR(255) NOT NULL,
  is_enabled BOOLEAN DEFAULT false,
  backup_codes TEXT[], -- Array of backup codes
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Newsletter Sources
CREATE TABLE newsletters (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255) NOT NULL,
  description TEXT,
  sender_email VARCHAR(255),
  sender_domain VARCHAR(255),
  is_predefined BOOLEAN DEFAULT false, -- true for admin-curated newsletters
  logo_url VARCHAR(500),
  website_url VARCHAR(500),
  frequency VARCHAR(50), -- daily, weekly, monthly
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- User Newsletter Subscriptions
CREATE TABLE user_subscriptions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  newsletter_id UUID REFERENCES newsletters(id) ON DELETE CASCADE,
  is_active BOOLEAN DEFAULT true,
  custom_category VARCHAR(100), -- user-defined category
  ai_enabled BOOLEAN DEFAULT true,
  display_preference JSONB, -- {type: 'full|summary|title', show_images: true}
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(user_id, newsletter_id)
);

-- Categories (both predefined and user-created)
CREATE TABLE categories (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(100) NOT NULL,
  description TEXT,
  user_id UUID REFERENCES users(id) ON DELETE CASCADE, -- NULL for system categories
  color VARCHAR(7) DEFAULT '#3B82F6', -- hex color
  icon VARCHAR(50), -- icon name
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Newsletter Articles/Issues
CREATE TABLE articles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  newsletter_id UUID REFERENCES newsletters(id) ON DELETE CASCADE,
  user_id UUID REFERENCES users(id) ON DELETE CASCADE, -- which user received this
  subject VARCHAR(500),
  content TEXT, -- original HTML content
  plain_content TEXT, -- extracted plain text
  sender_email VARCHAR(255),
  received_at TIMESTAMP,
  
  -- AI-generated fields
  ai_summary TEXT,
  ai_category_id UUID REFERENCES categories(id),
  ai_interest_score INTEGER CHECK (ai_interest_score >= 0 AND ai_interest_score <= 100),
  ai_generated_title VARCHAR(300),
  ai_thumbnail_url VARCHAR(500),
  ai_tags TEXT[], -- array of tags
  
  -- Processing status
  processing_status VARCHAR(50) DEFAULT 'pending', -- pending, processing, completed, failed
  processed_at TIMESTAMP,
  
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- User Saved Articles
CREATE TABLE saved_articles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  article_id UUID REFERENCES articles(id) ON DELETE CASCADE,
  custom_notes TEXT,
  saved_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(user_id, article_id)
);

-- User Preferences
CREATE TABLE user_preferences (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE UNIQUE,
  
  -- AI Preferences
  ai_interest_keywords TEXT[], -- keywords for interest detection
  ai_exclude_keywords TEXT[], -- keywords to exclude
  min_interest_score INTEGER DEFAULT 50,
  
  -- Display Preferences
  default_display_mode VARCHAR(20) DEFAULT 'summary', -- full, summary, title_only
  items_per_page INTEGER DEFAULT 20,
  theme VARCHAR(20) DEFAULT 'light',
  
  -- Notification Settings
  email_notifications BOOLEAN DEFAULT true,
  digest_frequency VARCHAR(20) DEFAULT 'daily', -- daily, weekly, never
  
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Processing Jobs Queue
CREATE TABLE processing_jobs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  job_type VARCHAR(50) NOT NULL, -- email_processing, ai_analysis, thumbnail_generation
  payload JSONB NOT NULL,
  status VARCHAR(20) DEFAULT 'pending', -- pending, processing, completed, failed
  attempts INTEGER DEFAULT 0,
  max_attempts INTEGER DEFAULT 3,
  error_message TEXT,
  scheduled_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  started_at TIMESTAMP,
  completed_at TIMESTAMP
);

-- Raw Emails (temporary storage)
CREATE TABLE raw_emails (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  message_id VARCHAR(255),
  sender VARCHAR(255),
  subject VARCHAR(500),
  received_date TIMESTAMP,
  raw_content TEXT, -- full email source
  processed BOOLEAN DEFAULT false,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Indexes for performance
CREATE INDEX idx_articles_user_received ON articles(user_id, received_at DESC);
CREATE INDEX idx_articles_newsletter ON articles(newsletter_id);
CREATE INDEX idx_articles_processing ON articles(processing_status);
CREATE INDEX idx_user_subscriptions_active ON user_subscriptions(user_id, is_active);
CREATE INDEX idx_saved_articles_user ON saved_articles(user_id, saved_at DESC);
CREATE INDEX idx_processing_jobs_status ON processing_jobs(status, scheduled_at);

-- Subscription Plans
CREATE TABLE subscription_plans (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(100) NOT NULL, -- 'free', 'pro', 'enterprise'
  display_name VARCHAR(100) NOT NULL, -- 'Free', 'Pro', 'Enterprise'
  description TEXT,
  price_monthly DECIMAL(10,2) DEFAULT 0,
  price_yearly DECIMAL(10,2) DEFAULT 0,
  
  -- Feature limits
  max_newsletters INTEGER DEFAULT 10, -- unlimited = -1
  max_articles_per_month INTEGER DEFAULT 1000,
  max_saved_articles INTEGER DEFAULT 100,
  max_categories INTEGER DEFAULT 5,
  
  -- Feature flags
  ai_summaries_enabled BOOLEAN DEFAULT true,
  ai_thumbnails_enabled BOOLEAN DEFAULT false,
  ai_interest_scoring_enabled BOOLEAN DEFAULT true,
  custom_categories_enabled BOOLEAN DEFAULT true,
  email_digest_enabled BOOLEAN DEFAULT true,
  advanced_filtering_enabled BOOLEAN DEFAULT false,
  api_access_enabled BOOLEAN DEFAULT false,
  priority_support_enabled BOOLEAN DEFAULT false,
  white_label_enabled BOOLEAN DEFAULT false,
  
  -- Metadata
  is_active BOOLEAN DEFAULT true,
  sort_order INTEGER DEFAULT 0,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- User Subscriptions
CREATE TABLE user_subscriptions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  plan_id UUID REFERENCES subscription_plans(id),
  
  -- Subscription status
  status VARCHAR(20) DEFAULT 'active', -- active, canceled, expired, trial
  
  -- Billing cycle
  billing_cycle VARCHAR(10) DEFAULT 'monthly', -- monthly, yearly
  current_period_start TIMESTAMP,
  current_period_end TIMESTAMP,
  
  -- Trial information
  trial_start TIMESTAMP,
  trial_end TIMESTAMP,
  
  -- Payment information (for future Stripe integration)
  stripe_subscription_id VARCHAR(255) UNIQUE,
  stripe_customer_id VARCHAR(255),
  
  -- Usage tracking
  newsletters_count INTEGER DEFAULT 0,
  articles_this_month INTEGER DEFAULT 0,
  saved_articles_count INTEGER DEFAULT 0,
  categories_count INTEGER DEFAULT 0,
  
  -- Timestamps
  started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  canceled_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  
  UNIQUE(user_id) -- One active subscription per user
);

-- Usage tracking for analytics and billing
CREATE TABLE usage_events (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  event_type VARCHAR(50) NOT NULL, -- 'newsletter_added', 'article_processed', 'ai_summary_generated', etc.
  event_data JSONB, -- Additional event details
  quota_consumed INTEGER DEFAULT 1, -- How much quota this event consumed
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Feature flags for gradual rollout
CREATE TABLE feature_flags (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(100) UNIQUE NOT NULL,
  description TEXT,
  is_enabled BOOLEAN DEFAULT false,
  rollout_percentage INTEGER DEFAULT 0 CHECK (rollout_percentage >= 0 AND rollout_percentage <= 100),
  target_users TEXT[], -- Array of user IDs for targeted rollout
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Payment history (for when payments are enabled)
CREATE TABLE payment_history (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  subscription_id UUID REFERENCES user_subscriptions(id),
  
  -- Payment details
  amount DECIMAL(10,2) NOT NULL,
  currency VARCHAR(3) DEFAULT 'USD',
  status VARCHAR(20) NOT NULL, -- 'pending', 'succeeded', 'failed'
  
  -- Payment method
  payment_method VARCHAR(50), -- 'stripe', 'paypal', etc.
  payment_provider_id VARCHAR(255), -- Stripe payment intent ID, etc.
  
  -- Invoice information
  invoice_url VARCHAR(500),
  receipt_url VARCHAR(500),
  
  -- Timestamps
  processed_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Referral system (for growth)
CREATE TABLE referrals (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  referrer_id UUID REFERENCES users(id) ON DELETE CASCADE,
  referred_id UUID REFERENCES users(id) ON DELETE CASCADE,
  referral_code VARCHAR(20) UNIQUE,
  
  -- Rewards
  referrer_reward_type VARCHAR(20), -- 'free_month', 'discount', 'credits'
  referrer_reward_amount DECIMAL(10,2),
  referred_reward_type VARCHAR(20),
  referred_reward_amount DECIMAL(10,2),
  
  -- Status
  status VARCHAR(20) DEFAULT 'pending', -- pending, completed, expired
  completed_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  
  UNIQUE(referrer_id, referred_id)
);

-- Insert default free plan
INSERT INTO subscription_plans (name, display_name, description, price_monthly, price_yearly, max_newsletters, max_articles_per_month, max_saved_articles, max_categories)
VALUES ('free', 'Free', 'Perfect for getting started with newsletter aggregation', 0, 0, 10, 1000, 100, 5);

-- Insert premium plans (hidden for now)
INSERT INTO subscription_plans (name, display_name, description, price_monthly, price_yearly, max_newsletters, max_articles_per_month, max_saved_articles, max_categories, ai_thumbnails_enabled, advanced_filtering_enabled, api_access_enabled)
VALUES ('pro', 'Pro', 'Advanced features for power users', 9.99, 99.99, -1, -1, -1, -1, true, true, true);

INSERT INTO subscription_plans (name, display_name, description, price_monthly, price_yearly, max_newsletters, max_articles_per_month, max_saved_articles, max_categories, ai_thumbnails_enabled, advanced_filtering_enabled, api_access_enabled, priority_support_enabled, white_label_enabled)
VALUES ('enterprise', 'Enterprise', 'Full-featured solution for teams', 29.99, 299.99, -1, -1, -1, -1, true, true, true, true, true);

-- Insert feature flags (all disabled for now)
INSERT INTO feature_flags (name, description, is_enabled) VALUES 
('monetization_enabled', 'Enable subscription plans and payment processing', false),
('pro_plan_visible', 'Show Pro plan in pricing page', false),
('enterprise_plan_visible', 'Show Enterprise plan in pricing page', false),
('usage_limits_enforced', 'Enforce usage limits based on subscription plans', false),
('referral_system_enabled', 'Enable referral program', false),
('api_access_enabled', 'Enable API access for developers', false);

-- Indexes for performance
CREATE INDEX idx_user_subscriptions_user ON user_subscriptions(user_id);
CREATE INDEX idx_user_subscriptions_status ON user_subscriptions(status);
CREATE INDEX idx_usage_events_user_date ON usage_events(user_id, created_at);
CREATE INDEX idx_usage_events_type ON usage_events(event_type);
CREATE INDEX idx_payment_history_user ON payment_history(user_id);
CREATE INDEX idx_referrals_code ON referrals(referral_code);

-- Function to check if user has feature access
CREATE OR REPLACE FUNCTION user_has_feature_access(
  p_user_id UUID,
  p_feature_name VARCHAR(100)
) RETURNS BOOLEAN AS $$
DECLARE
  plan_feature_enabled BOOLEAN := false;
  feature_flag_enabled BOOLEAN := false;
BEGIN
  -- Check if feature is enabled in user's plan
  SELECT 
    CASE p_feature_name
      WHEN 'ai_summaries' THEN sp.ai_summaries_enabled
      WHEN 'ai_thumbnails' THEN sp.ai_thumbnails_enabled
      WHEN 'ai_interest_scoring' THEN sp.ai_interest_scoring_enabled
      WHEN 'custom_categories' THEN sp.custom_categories_enabled
      WHEN 'email_digest' THEN sp.email_digest_enabled
      WHEN 'advanced_filtering' THEN sp.advanced_filtering_enabled
      WHEN 'api_access' THEN sp.api_access_enabled
      WHEN 'priority_support' THEN sp.priority_support_enabled
      WHEN 'white_label' THEN sp.white_label_enabled
      ELSE true
    END INTO plan_feature_enabled
  FROM user_subscriptions us
  JOIN subscription_plans sp ON us.plan_id = sp.id
  WHERE us.user_id = p_user_id AND us.status = 'active';
  
  -- Check global feature flag
  SELECT COALESCE(is_enabled, false) INTO feature_flag_enabled
  FROM feature_flags 
  WHERE name = p_feature_name || '_enabled';
  
  -- If monetization is disabled, grant all features
  IF NOT EXISTS(SELECT 1 FROM feature_flags WHERE name = 'monetization_enabled' AND is_enabled = true) THEN
    RETURN true;
  END IF;
  
  RETURN COALESCE(plan_feature_enabled, true) AND COALESCE(feature_flag_enabled, true);
END;
$$ LANGUAGE plpgsql;

-- Function to check usage limits
CREATE OR REPLACE FUNCTION check_usage_limit(
  p_user_id UUID,
  p_limit_type VARCHAR(50)
) RETURNS BOOLEAN AS $$
DECLARE
  current_usage INTEGER := 0;
  limit_value INTEGER := -1;
BEGIN
  -- If monetization is disabled, allow unlimited usage
  IF NOT EXISTS(SELECT 1 FROM feature_flags WHERE name = 'usage_limits_enforced' AND is_enabled = true) THEN
    RETURN true;
  END IF;
  
  -- Get user's plan limits
  SELECT 
    CASE p_limit_type
      WHEN 'newsletters' THEN sp.max_newsletters
      WHEN 'articles_monthly' THEN sp.max_articles_per_month
      WHEN 'saved_articles' THEN sp.max_saved_articles
      WHEN 'categories' THEN sp.max_categories
      ELSE -1
    END INTO limit_value
  FROM user_subscriptions us
  JOIN subscription_plans sp ON us.plan_id = sp.id
  WHERE us.user_id = p_user_id AND us.status = 'active';
  
  -- If unlimited (-1), allow
  IF limit_value = -1 THEN
    RETURN true;
  END IF;
  
  -- Get current usage
  SELECT 
    CASE p_limit_type
      WHEN 'newsletters' THEN us.newsletters_count
      WHEN 'articles_monthly' THEN us.articles_this_month
      WHEN 'saved_articles' THEN us.saved_articles_count
      WHEN 'categories' THEN us.categories_count
      ELSE 0
    END INTO current_usage
  FROM user_subscriptions us
  WHERE us.user_id = p_user_id AND us.status = 'active';
  
  RETURN current_usage < limit_value;
END;
$$ LANGUAGE plpgsql;